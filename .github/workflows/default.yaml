name: default

on:
  workflow_dispatch: {}
  push:
    branches:
      - main
      - feat/*
      - fix/*

env:
  GO_VERSION: "1.18.1"

jobs:
  prepare:
    runs-on: ubuntu-22.04
    outputs:
      BUILD_TIME: ${{ steps.buildinfo.outputs.BUILD_TIME }}
      BUILD_VERSION: ${{ steps.buildinfo.outputs.BUILD_VERSION }}
      BUILD_REVISION: ${{ steps.buildinfo.outputs.BUILD_REVISION }}
      CHART_VERSION: ${{ steps.chartinfo.outputs.CHART_VERSION }}
    steps:
      - name: checkout
        uses: actions/checkout@v3
      - name: calculate build info
        id: buildinfo
        run: |
          VERSION=sha-${GITHUB_SHA::8}
          echo "BUILD_TIME=$(date -u +'%Y-%m-%dT%H:%M:%SZ')" >> $GITHUB_OUTPUT
          echo "BUILD_VERSION=${VERSION}" >> $GITHUB_OUTPUT
          echo "BUILD_REVISION=${GITHUB_SHA}" >> $GITHUB_OUTPUT
      - name: setup helm
        uses: azure/setup-helm@v3
        with:
          version: latest
          token: ${{ secrets.PAT_TOKEN }}
      - name: get latest chart version
        id: chartinfo
        run: |
          helm repo add absurdlab https://absurdlab.github.io/charts
          echo "CHART_VERSION=$(helm search repo absurdlab/tigerd --versions -o json | jq '.[0].version' -r)" >> $GITHUB_OUTPUT
      - name: debug
        run: |
          echo build_time=${{ steps.buildinfo.outputs.BUILD_TIME }}
          echo build_version=${{ steps.buildinfo.outputs.BUILD_VERSION }}
          echo build_revision=${{ steps.buildinfo.outputs.BUILD_REVISION }}
          echo chart_version=${{ steps.chartinfo.outputs.CHART_VERSION }}

  test:
    runs-on: ubuntu-22.04
    strategy:
      fail-fast: true
      matrix:
        test_type:
          - unit
          - integration
    steps:
      - name: checkout
        uses: actions/checkout@v3
      - name: setup go
        uses: actions/setup-go@v3
        with:
          go-version: ${{ env.GO_VERSION }}
      - name: setup cache
        uses: actions/cache@v3
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-
      - name: tidy
        run: |
          go mod tidy
      - name: test
        run: |
          go test --tags ${{ matrix.test_type }} ./...

  build:
    runs-on: ubuntu-22.04
    needs:
      - test
      - prepare
    steps:
      - name: checkout
        uses: actions/checkout@v3
      - name: setup qemu
        uses: docker/setup-qemu-action@v2
      - name: setup buildx
        uses: docker/setup-buildx-action@v2
        with:
          platforms: linux/amd64
      - name: login to ghcr
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ secrets.GHCR_USERNAME }}
          password: ${{ secrets.GHCR_PASSWORD }}
      - name: build
        uses: docker/build-push-action@v3
        with:
          push: true
          platforms: linux/amd64
          build-args: |
            BUILD_TIME=${{ needs.prepare.outputs.BUILD_TIME }}
            BUILD_VERSION=${{ needs.prepare.outputs.BUILD_VERSION }}
          tags: |
            ghcr.io/absurdlab/tigerd:latest
            ghcr.io/absurdlab/tigerd:${{ needs.prepare.outputs.BUILD_VERSION }}
          labels: |
            org.opencontainers.image.title="tigerd"
            org.opencontainers.image.source="https://github.com/absurdlab/tigerd"
            org.opencontainers.image.authors="Weinan Qiu"

  deploy:
    runs-on: ubuntu-22.04
    if: github.ref == 'refs/heads/main'
    needs:
      - build
      - prepare
    steps:
      - name: notify staging deploy pipeline
        uses: convictional/trigger-workflow-and-wait@v1.6.1
        with:
          owner: absurdlab
          repo: deploy
          github_token: ${{ secrets.PAT_TOKEN }}
          workflow_file_name: tigerd.yaml
          ref: main
          propagate_failure: false
          wait_workflow: false
          client_payload: |
            {"environment": "staging", "version": "${{ needs.prepare.outputs.BUILD_VERSION }}", "chart_version": "${{ needs.prepare.outputs.CHART_VERSION }}"}